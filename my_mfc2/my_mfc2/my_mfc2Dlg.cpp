
// my_mfc2Dlg.cpp : 实现文件
//

#include "stdafx.h"
#include "my_mfc2.h"
#include "my_mfc2Dlg.h"
#include "afxdialogex.h"
#include <assert.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// Cmy_mfc2Dlg 对话框



Cmy_mfc2Dlg::Cmy_mfc2Dlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(Cmy_mfc2Dlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void Cmy_mfc2Dlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BUTTON1, btn1);
	DDX_Control(pDX, IDC_BUTTON2, btn2);
}

BEGIN_MESSAGE_MAP(Cmy_mfc2Dlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON1, &Cmy_mfc2Dlg::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON3, &Cmy_mfc2Dlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &Cmy_mfc2Dlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &Cmy_mfc2Dlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON6, &Cmy_mfc2Dlg::OnBnClickedButton6)
END_MESSAGE_MAP()


// Cmy_mfc2Dlg 消息处理程序

BOOL Cmy_mfc2Dlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。  当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO:  在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void Cmy_mfc2Dlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。  对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void Cmy_mfc2Dlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR Cmy_mfc2Dlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void Cmy_mfc2Dlg::OnBnClickedButton1()
{
	// TODO:  在此添加控件通知处理程序代码
	HINSTANCE hRslt = ShellExecute(NULL, _T("open"),

		_T("calc.exe"), NULL, NULL, SW_SHOWNORMAL);

	assert(hRslt > (HINSTANCE)HINSTANCE_ERROR);
}


void Cmy_mfc2Dlg::OnBnClickedButton3()
{
	// TODO:  在此添加控件通知处理程序代码
	HINSTANCE hRslt = ShellExecute(NULL, _T("open"),

		_T("notepad.EXE"), NULL, NULL, SW_SHOWNORMAL);

	assert(hRslt > (HINSTANCE)HINSTANCE_ERROR);
}


void Cmy_mfc2Dlg::OnBnClickedButton4()
{
	// TODO:  在此添加控件通知处理程序代码
	HINSTANCE hRslt = ShellExecute(NULL, _T("open"),

		_T("Nslookup.EXE"), NULL, NULL, SW_SHOWNORMAL);

	assert(hRslt > (HINSTANCE)HINSTANCE_ERROR);
}


void Cmy_mfc2Dlg::OnBnClickedButton5()
{
	// TODO:  在此添加控件通知处理程序代码
	int iResult = ::MessageBox(NULL, TEXT("确认要关机？"), TEXT("关机"), MB_OKCANCEL | MB_ICONQUESTION);

	if (1 == iResult)

	{

		CString str;

		((CEdit *)GetDlgItem(IDC_EDIT1))->GetWindowText(str);//获得

		CString Shut = _T("shutdown   -s   -t ");     //左部分红色固定的字符串

		str = Shut + str;

		const size_t strsize = (str.GetLength() + 1) * 2; // 宽字符的长度;

		char * pstr = new char[strsize]; //分配空间;

		size_t sz = 0;

		wcstombs_s(&sz, pstr, strsize, str, _TRUNCATE);

		int n = atoi((const char*)pstr); // 字符串已经由原来的CString 转换成了 const char*

		system(pstr);

		//system("shutdown -s -t 15");

	}
}


void Cmy_mfc2Dlg::OnBnClickedButton6()
{
	// TODO:  在此添加控件通知处理程序代码
	system("shutdown -a");
}
